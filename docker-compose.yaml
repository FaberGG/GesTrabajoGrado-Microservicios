# ============================================================
# DOCKER COMPOSE GLOBAL - RAÍZ DEL PROYECTO
# ============================================================
# Este archivo va en la RAÍZ del proyecto
# Orquesta TODOS los microservicios del sistema
# ============================================================

services:
  # ============================================================
  # API GATEWAY - Punto de entrada único al sistema
  # ============================================================
  gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JWT_SECRET=${JWT_SECRET}
      - GATEWAY_PORT=8080
      - GATEWAY_ENFORCE_ROLE_CHECK=${GATEWAY_ENFORCE_ROLE_CHECK}
      - GATEWAY_CONNECT_TIMEOUT=${GATEWAY_CONNECT_TIMEOUT}
      - GATEWAY_READ_TIMEOUT=${GATEWAY_READ_TIMEOUT}
      - IDENTITY_URL=http://identity:8081
      - SUBMISSION_URL=http://submission:8082
      - NOTIFICATION_URL=http://notification:8083
      - REVIEW_URL=http://review:8084
      - TRACKING_URL=http://tracking:8085
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
    depends_on:
      identity:
        condition: service_healthy
      submission:
        condition: service_healthy
      notification:
        condition: service_healthy
      review:
        condition: service_healthy
      tracking:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/gateway/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================
  # IDENTITY SERVICE - Autenticación y gestión de usuarios
  # ============================================================
  identity:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8081
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=jdbc:postgresql://postgres-identity:5432/${IDENTITY_DB_NAME}
      - DATABASE_USERNAME=${IDENTITY_DB_USER}
      - DATABASE_PASSWORD=${IDENTITY_DB_PASS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-identity:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================
  # SUBMISSION SERVICE - Gestión de entregas y documentos
  # ============================================================
  submission:
    build:
      context: ./submission-service
      dockerfile: Dockerfile
    container_name: submission-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8082
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=jdbc:postgresql://postgres-submission:5432/${SUBMISSION_DB_NAME}
      - DATABASE_USERNAME=${SUBMISSION_DB_USER}
      - DATABASE_PASSWORD=${SUBMISSION_DB_PASS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
      - FILE_STORAGE_PATH=/app/uploads
    volumes:
      - submission-uploads:/app/uploads
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-submission:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================
  # NOTIFICATION SERVICE - Envío de notificaciones
  # ============================================================
  notification:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8083
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=jdbc:postgresql://postgres-notification:5432/${NOTIFICATION_DB_NAME}
      - DATABASE_USERNAME=${NOTIFICATION_DB_USER}
      - DATABASE_PASSWORD=${NOTIFICATION_DB_PASS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    volumes:
      - ./notification-service/logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-notification:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================
  # REVIEW SERVICE - Evaluación de documentos
  # ============================================================
  review:
    build:
      context: ./review-service
      dockerfile: Dockerfile
    container_name: review-service
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8084
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=jdbc:postgresql://postgres-review:5432/${REVIEW_DB_NAME}
      - DATABASE_USERNAME=${REVIEW_DB_USER}
      - DATABASE_PASSWORD=${REVIEW_DB_PASS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-review:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================
  # PROGRESS TRACKING SERVICE - Historial y estado (CQRS Read)
  # ============================================================
  tracking:
    build:
      context: ./progress-tracking-service
      dockerfile: Dockerfile
    container_name: tracking-service
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8085
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=jdbc:postgresql://postgres-tracking:5432/${TRACKING_DB_NAME}
      - DATABASE_USERNAME=${TRACKING_DB_USER}
      - DATABASE_PASSWORD=${TRACKING_DB_PASS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-tracking:
        condition: service_healthy
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================
  # RABBITMQ - Message Broker para comunicación asíncrona
  # ============================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # Puerto AMQP
      - "15672:15672" # Puerto Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_NODENAME=rabbit@rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-logs:/var/log/rabbitmq
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================
  # BASES DE DATOS POSTGRESQL - Una por microservicio
  # ============================================================

  postgres-identity:
    image: postgres:15-alpine
    container_name: postgres-identity
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${IDENTITY_DB_NAME}
      - POSTGRES_USER=${IDENTITY_DB_USER}
      - POSTGRES_PASSWORD=${IDENTITY_DB_PASS}
    volumes:
      - postgres-identity-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IDENTITY_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-submission:
    image: postgres:15-alpine
    container_name: postgres-submission
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${SUBMISSION_DB_NAME}
      - POSTGRES_USER=${SUBMISSION_DB_USER}
      - POSTGRES_PASSWORD=${SUBMISSION_DB_PASS}
    volumes:
      - postgres-submission-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SUBMISSION_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-notification:
    image: postgres:15-alpine
    container_name: postgres-notification
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${NOTIFICATION_DB_NAME}
      - POSTGRES_USER=${NOTIFICATION_DB_USER}
      - POSTGRES_PASSWORD=${NOTIFICATION_DB_PASS}
    volumes:
      - postgres-notification-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-review:
    image: postgres:15-alpine
    container_name: postgres-review
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${REVIEW_DB_NAME}
      - POSTGRES_USER=${REVIEW_DB_USER}
      - POSTGRES_PASSWORD=${REVIEW_DB_PASS}
    volumes:
      - postgres-review-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REVIEW_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-tracking:
    image: postgres:15-alpine
    container_name: postgres-tracking
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${TRACKING_DB_NAME}
      - POSTGRES_USER=${TRACKING_DB_USER}
      - POSTGRES_PASSWORD=${TRACKING_DB_PASS}
    volumes:
      - postgres-tracking-data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - trabajo-grado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TRACKING_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# ============================================================
# NETWORKS
# ============================================================
networks:
  trabajo-grado-network:
    driver: bridge
    name: trabajo-grado-network

# ============================================================
# VOLUMES
# ============================================================
volumes:
  rabbitmq-data:
    driver: local
  rabbitmq-logs:
    driver: local
  submission-uploads:
    driver: local
  postgres-identity-data:
    driver: local
  postgres-submission-data:
    driver: local
  postgres-notification-data:
    driver: local
  postgres-review-data:
    driver: local
  postgres-tracking-data:
    driver: local